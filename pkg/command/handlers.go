package command

import (
	"das-frama/dudes-bot/pkg/bot"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"os"

	"s32x.com/ovrstat/ovrstat"
)

const firstWorkDay = "05.06.2020"

func start(update bot.Update) CommandResponse {
	fileName := "data/chats.json"
	var chats []*bot.Chat

	// If file exists.
	if _, err := os.Stat(fileName); err == nil {
		file, _ := ioutil.ReadFile(fileName)
		json.Unmarshal(file, &chats)
	}

	// Check if chat is in slice.
	if isExist := inChats(chats, update.Message.Chat.ID); !isExist {
		chats = append(chats, update.Message.Chat)
	}

	// Store chat.
	file, _ := json.MarshalIndent(chats, "", "  ")
	_ = ioutil.WriteFile("data/chats.json", file, 0644)

	// Reply.
	return CommandResponse{
		Reply: "–ê —è —É–∂–µ –∑–∞–ø—É—â–µ–Ω",
	}
}

func ping(update bot.Update) CommandResponse {
	return CommandResponse{
		Reply: "pong",
	}
}

func schedule(update bot.Update) CommandResponse {
	// workTime, err := time.Parse("02.01.2006", firstWorkDay)
	// if err != nil {
	// 	log.Fatalln(err)
	// }

	// var verb string
	// if msg == "" {
	// 	verb = "–°–µ–≥–æ–¥–Ω—è"
	// } else {
	// 	verb = msg
	// }

	// currentTime := time.Now()
	// switch msg {
	// case "–∑–∞–≤—Ç—Ä–∞":
	// 	currentTime = currentTime.Add(time.Hour * 24)
	// case "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞":
	// 	currentTime = currentTime.Add(time.Hour * 48)
	// }

	// hours := currentTime.Sub(workTime).Hours()
	// days := int(hours / 24)

	// var reply string
	// if days%4 < 2 {
	// 	reply = "%s –°–∞—à–∞ —Ç—Ä—É–¥–∏—Ç—Å—è –≤ –ø–æ—Ç–µ –ª–∏—Ü–∞!"
	// } else {
	// 	reply = "%s –°–∞—à–∞ –æ—Ç–¥—ã—Ö–∞–µ—Ç! üòäüòäüòä"
	// }

	// return CommandResponse{
	// 	Reply: fmt.Sprintf(reply, strings.Title(verb)),
	// }
	return CommandResponse{
		Reply: "schedule",
	}
}

func call(update bot.Update) CommandResponse {
	// reply := fmt.Sprintf("–ú–Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞ –∫–æ–º–∞–Ω–¥–∞, —á—Ç–æ–±—ã —è –≤—Å–µ—Ö –ø—Ä–∏–∑–≤–∞–ª %s.", msg)
	reply := fmt.Sprintf("–ú–Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞ –∫–æ–º–∞–Ω–¥–∞, —á—Ç–æ–±—ã —è –≤—Å–µ—Ö –ø—Ä–∏–∑–≤–∞–ª!")
	return CommandResponse{
		Reply: reply,
	}
}

func overwatch(update bot.Update) CommandResponse {
	reply := "–Ø –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö —á–ª–µ–Ω–æ–≤ –Ω–∞—à–µ–π —Å–ª–∞–≤–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–∑–æ–≤–∏—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –µ—â—ë —Ä–∞–∑, –Ω–æ —Å —É–ø–æ–º—è–Ω–∏–µ–º –∫–æ–≥–æ-–Ω–∏–±—É–¥—å —á–µ—Ä–µ–∑ `@`."
	users := update.Message.Mentions()
	if len(users) > 0 {
		tags := make(map[string]string)

		// Get player tag.
		file, _ := ioutil.ReadFile("data/overwatch.json")
		_ = json.Unmarshal(file, &tags)
		if tag, ok := tags[users[0]]; ok {
			if stats, err := ovrstat.PCStats(tag); err != nil {
				reply = "–û—à–∏–±–∫–∞"
			} else {
				reply = ""
				for _, rating := range stats.Ratings {
					reply += fmt.Sprintf("%s: %d\n", rating.Role, rating.Level)
				}
			}
		}

	}

	return CommandResponse{
		Reply: reply,
	}
}
