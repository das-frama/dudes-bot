package command

import (
	"encoding/json"
	"fmt"
	"io/ioutil"
	"math/rand"
	"net/http"
	"strings"
	"time"

	"s32x.com/ovrstat/ovrstat"
)

const helpText = `
–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:
/stop - –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤ —ç—Ç–æ–º —á–∞—Ç–µ;
/ping - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å;
/schedule [–¥–µ–Ω—å] - –†–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —Å–µ–≥–æ–¥–Ω—è –°–∞—à–∞;
/overwatch [@—É—á–∞—Å—Ç–Ω–∏–∫] - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –≤ Overwatch;
/cat - –ü—Ä–∏–∑–≤–∞—Ç—å –∫–æ—Ç–∏–∫–∞;
/dog - –ü—Ä–∏–∑–≤–∞—Ç—å –ø—ë—Å–µ–ª—è;
/panda - –ü—Ä–∏–∑–≤–∞—Ç—å –ø–∞–Ω–¥—É;
`

const catURL = "https://cataas.com/cat"
const dogURL = "https://placedog.net/500"
const pandaURL = "https://loremflickr.com/500/500/panda"
const memeURL = "https://meme-api.herokuapp.com/gimme"

// Start runs the bot in chat on the first run or if it's was previously stopped.
func start(cfg commandConfig) (Result, error) {
	var result Result

	// Check if bot already started in the chat.
	_, created, err := cfg.Queryer.GetOrCreateChat(cfg.Message.Chat)
	if err != nil {
		return result, err
	}

	if created {
		result.Text = fmt.Sprintf("–Ø –ø—Ä–æ–±—É–¥–∏–ª—Å—è, –∫–∞–∫ –º–µ–¥–≤–µ–¥—å –æ—Ç —Å–ø—è—á–∫–∏ –∑–∏–º–Ω–µ–π.\n%s", helpText)
	} else {
		result.Text = "–Ø —É–∂–µ –∑–∞–ø—É—â–µ–Ω.\n/help - –≤—ã–∑–≤–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É."
	}

	return result, nil
}

func stop(cfg commandConfig) (Result, error) {
	var result Result

	// Check if bot already started in the chat.
	err := cfg.Queryer.StopChat(cfg.Message.Chat.ID)
	if err != nil {
		return result, err
	}

	result.Text = "–Ø –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è.\n–ß—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–µ–Ω—è —Å–Ω–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start."

	return result, nil
}

func ping(cfg commandConfig) (Result, error) {
	return Result{
		Text: "–î–∞, –∏ –≤ —Å–∞–º–æ–º –¥–µ–ª–µ —è –∂–∏–≤.",
	}, nil
}

// Schedule for Sasha.
func schedule(cfg commandConfig) (Result, error) {
	var result Result

	// Get first work day.
	workDate, err := time.Parse("2006-01-02 MST", "2020-10-27 MSK")
	if err != nil {
		return result, err
	}

	// Params.
	params := cfg.Message.Params()

	// Get word.
	word := "—Å–µ–≥–æ–¥–Ω—è"
	if len(params) > 0 && params[0] != "" {
		word = params[0]
	}

	// Find out word offset.
	var nextDate time.Time
	now := time.Now()
	isDate := false
	isNextYear := false
	switch word {
	case "—Å–µ–≥–æ–¥–Ω—è":
		nextDate = now
	case "–ø–æ–∑–∞–ø–æ–∑–∞–≤—á–µ—Ä–∞":
		nextDate = now.Add(time.Hour * 24 * -3)
	case "–ø–æ–∑–∞–≤—á–µ—Ä–∞":
		nextDate = now.Add(time.Hour * 24 * -2)
	case "–≤—á–µ—Ä–∞":
		nextDate = now.Add(time.Hour * 24 * -1)
	case "–∑–∞–≤—Ç—Ä–∞":
		nextDate = now.Add(time.Hour * 24)
	case "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞":
		nextDate = now.Add(time.Hour * 24 * 2)
	case "–ø–æ—Å–ª–µ–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞":
		nextDate = now.Add(time.Hour * 24 * 3)
	default:
		word = fmt.Sprintf("%s.%d %s MSK", word, now.Year(), now.Format("03:04:05.999999999"))
		if nextDate, err = time.Parse("02.01.2006 03:04:05.999999999 MST", word); err != nil {
			return result, ErrWrongDateFormat
		}
		if nextDate.Before(now) {
			nextDate = nextDate.AddDate(1, 0, 0)
			isNextYear = true
		}
		isDate = true
	}

	// Calculate days
	days := int(nextDate.Sub(workDate).Hours() / 24)

	// Found out what text should be displayed.
	var text string
	if days%4 < 2 {
		text = "–°–∞—à–∞ —Ç—Ä—É–¥–∏—Ç—Å—è –≤ –ø–æ—Ç–µ –ª–∏—Ü–∞!"
	} else if nextDate.Day() == 10 && nextDate.Month() == time.November {
		text = "–°–∞—à–∞ –æ—Ç–¥—ã—Ö–∞–µ—Ç, –Ω–æ –≤—Å—Ç—Ä–µ—á–∞—Ç—å –ê–Ω–¥—Ä–µ—è –Ω–µ –ø–æ–µ–¥–µ—Ç! üò¢üò¢üò¢"
	} else {
		text = "–°–∞—à–∞ –æ—Ç–¥—ã—Ö–∞–µ—Ç! üòäüòäüòä"
	}

	// Fill up the result struct.
	if isDate {
		if isNextYear {
			result.Text = fmt.Sprintf("%d %s %d %s", nextDate.Day(), months[nextDate.Month()-1], nextDate.Year(), text)
		} else {
			result.Text = fmt.Sprintf("%d %s %s", nextDate.Day(), months[nextDate.Month()-1], text)
		}
	} else {
		result.Text = fmt.Sprintf("%s %s", strings.Title(word), text)
	}

	return result, nil
}

func call(cfg commandConfig) (Result, error) {
	var result Result

	result.Text = fmt.Sprintf(
		"–ú–Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞ –∫–æ–º–∞–Ω–¥–∞, —á—Ç–æ–±—ã —è –≤—Å–µ—Ö –ø—Ä–∏–∑–≤–∞–ª %s.",
		strings.Join(cfg.Message.Params(), " "),
	)

	return result, nil
}

func overwatch(cfg commandConfig) (Result, error) {
	var result Result

	// Default text.
	text := `–Ø –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö —á–ª–µ–Ω–æ–≤ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã.\n
	–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–∑–æ–≤–∏—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –µ—â—ë —Ä–∞–∑, –Ω–æ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –∫–æ–≥–æ-–Ω–∏–±—É–¥—å —á–µ—Ä–µ–∑ @.`

	users := cfg.Message.Mentions()
	if len(users) > 0 {
		tags := make(map[string]string)

		// Get player tag.
		file, _ := ioutil.ReadFile("data/overwatch.json")
		_ = json.Unmarshal(file, &tags)
		if tag, ok := tags[users[0]]; ok {
			if stats, err := ovrstat.PCStats(tag); err != nil {
				text = "–û—à–∏–±–∫–∞"
			} else {
				text = ""
				for _, rating := range stats.Ratings {
					text += fmt.Sprintf("%s: %d\n", rating.Role, rating.Level)
				}
			}
		}
	}

	result.Text = text

	return result, nil
}

func cat(cfg commandConfig) (Result, error) {
	result := Result{
		PhotoURL: catURL,
	}

	// If query was made by Anna.
	if cfg.Message.From.Username == "unknow2n" {
		joke := "–ö–æ–≥–¥–∞ –ê–Ω—è –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–Ω—è—Ç—å –≤ —á—ë–º –ø—Ä–∏–∫–æ–ª"
		catURL := "https://cataas.com/cat/5ef820f05bc3fa0010444489"
		result.PhotoURL = fmt.Sprintf("%s/says/%s", catURL, joke)
	} else {
		// Retrieve joke.
		joke, err := cfg.Queryer.QueryRandomCatJoke()
		if err != nil {
			return result, err
		}
		if joke.Text != "" {
			result.PhotoURL = fmt.Sprintf("%s/says/%s", result.PhotoURL, joke.Text)
			fmt.Println(result.PhotoURL)
		}
		// Random seed number for new image to appear.
		rand := rand.Int()
		result.PhotoURL = fmt.Sprintf("%s?seed=%d", result.PhotoURL, rand)
	}

	return result, nil
}

func dog(cfg commandConfig) (Result, error) {
	url := fmt.Sprintf("%s?random&seed=%d", dogURL, rand.Int())

	return Result{
		PhotoURL: url,
	}, nil
}

func panda(cfg commandConfig) (Result, error) {
	url := fmt.Sprintf("%s?random=%d", pandaURL, rand.Int())

	return Result{
		PhotoURL: url,
	}, nil
}

func meme(cfg commandConfig) (Result, error) {
	var result Result

	resp, err := http.Get(memeURL)
	if err != nil {
		return result, err
	}
	defer resp.Body.Close()

	var meme MemeResponse
	json.NewDecoder(resp.Body).Decode(&meme)
	result.PhotoURL = meme.URL

	return result, nil
}

func help(cfg commandConfig) (Result, error) {
	return Result{
		Text: helpText,
	}, nil
}
